- name: Set a fact for the qcow file
  set_fact:
      qcow: "{{ vm_directory }}/{{ inventory_hostname  + '.qcow2' }}"

- name: Check that the qcow2 exists
  stat:
    path: "{{ qcow }}"
  delegate_to: "{{ host }}"
  register: qcow_stat

- name: Delete the qcow file
  file:
    path: "{{ qcow }}"
    state: absent
  when: rebuild
  delegate_to: "{{ host }}"

  
- name: Convert the vmdk file
  shell: "qemu-img convert -f vmdk -O qcow2 {{ vm_directory }}/{{ images['eos']['vmdk']['name'] }} {{ qcow }}"
  # when: not qcow_stat['stat']['exists']
  delegate_to: "{{ host }}"


- name: Get all vms
  virt:
    command: list_vms
  register: list_vms
  become: true
  delegate_to: "{{ host }}"

- name: Output all vms
  debug:
      var: list_vms
  when: "ansible_verbosity >= 2"
  delegate_to: "{{ host }}"

- name: Get the info
  virt:
    name: "{{ inventory_hostname }}"
    command: info
  when: "inventory_hostname in list_vms['list_vms']"
  register: veos
  become: true
  delegate_to: "{{ host }}"

- name: Output veos
  debug:
    var: veos
  # when: "ansible_verbosity >= 2"

- name: Destroy the veos vm
  virt:
    name: "{{ inventory_hostname }}"
    command: destroy
  when: "inventory_hostname in list_vms['list_vms'] and veos is defined and veos[inventory_hostname]['state'] == 'running'"
  become: true
  delegate_to: "{{ host }}"

- name: Undefine the veos vm
  virt:
    name: "{{ inventory_hostname }}"
    command: undefine
  when: "inventory_hostname in list_vms['list_vms']"
  become: true
  delegate_to: "{{ host }}"

- name: Define the eos vm
  virt:
    name: "{{ inventory_hostname }}"
    command: define
    xml: "{{ lookup('template', 'eos.xml.j2') }}"
  become: true
  delegate_to: "{{ host }}"


- name: Start the eos vm
  virt:
    name: "{{ inventory_hostname }}"
    command: start
  become: true
  delegate_to: "{{ host }}"


- name: Get the veos vm mac address
  virt:
    name: "{{ inventory_hostname }}"
    command: get_xml
  become: true
  register: get_xml
  delegate_to: "{{ host }}"

- name: get the mac
  xml:
    xmlstring: "{{ get_xml['get_xml'] }}"
    xpath: /domain/devices/interface/mac
    content: attribute
    attribute: address
  register: mac
  delegate_to: "{{ host }}"

- name: Set this vm as a dict
  set_fact:
    dhcp_spec:
      mac: "{{ mac['matches'][0]['mac']['address'] }}"
      ip: "{{ ip_address }}"
      name: "{{ inventory_hostname }}"
  delegate_to: "{{ host }}"


- name: Template out the boot file
  template:
    src: bootfile.j2
    dest: "/mnt/space/vms/{{ inventory_hostname }}.cfg"
  delegate_to: "{{ bootp_server }}"

